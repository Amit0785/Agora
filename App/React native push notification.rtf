{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}}
{\colortbl ;\red192\green80\blue77;\red0\green77\blue187;\red255\green0\blue0;\red0\green0\blue255;\red0\green0\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\ri-22\sa200\sl276\slmult1\qc\f0\fs36\lang9\par
\cf1\b React Native Push Notification\cf0\b0\par

\pard\ri-22\sa200\sl276\slmult1\par
\fs32 Step 1:\par
\fs24 At first, need to download respective npm for the project. the npms are....\par
\cf2 npm i @react-native-community/push-notification-ios\par
npm i @react-native-firebase/app\par
npm i @react-native-firebase/messaging\par
npm i react-native-push-notification\par
\cf0\fs32 Step 2:\par
\fs24 need to add in android/app/build.gradle\par
+   \cf2 implementation "com.google.firebase:firebase-core:16.0.4" \cf0\par
\fs32 Step 3: \fs24\par
Create firebase accout and make this file \cf2 google-services.json \cf0 and add this file in \cf2 android/app\par
\cf0\fs32 Step 4:\par

\pard\ri-22\sl240\slmult1\fs24 Add this code in \cf2 android/app/src/main/AndroidManifest.xml \cf0 or you can add this code from firebase account creation process.\b\par
\par
       ............................ \par
\b0       <category android:name="android.intent.category.LAUNCHER" />\par
       </intent-filter>\par
      </activity>\cf2\par
       <meta-data  android:name="com.dieam.reactnativepushnotification.notification_foreground"\par
                    android:value="false"/>\par
        <!-- Change the resource name to your App's accent color - or any other color you want -->\par
        <meta-data  android:name="com.dieam.reactnativepushnotification.notification_color"\par
                    android:resource="@color/white"/> <!-- or @android:color/\{name\} to use a standard color -->\par
\par
        <receiver android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationActions" />\par
        <receiver android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationPublisher" />\par
        <receiver android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationBootEventReceiver">\par
            <intent-filter>\par
                <action android:name="android.intent.action.BOOT_COMPLETED" />\par
                <action android:name="android.intent.action.QUICKBOOT_POWERON" />\par
                <action android:name="com.htc.intent.action.QUICKBOOT_POWERON"/>\par
            </intent-filter>\par
        </receiver>\par
        <service\par
            android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService"\par
            android:exported="false" >\par
            <intent-filter>\par
                <action android:name="com.google.firebase.MESSAGING_EVENT" />\par
            </intent-filter>\par
        </service>\par
\cf0     </application>\par
</manifest>\par
\b ............................ \par
\par
\b0\fs32 Step 5:\par
\par
\fs24 Add two files named \cf2 FcmService.js \cf0 and \cf2 PushController.js \cf0 in your project which link in the app.js\par
\par

\pard\ri-22\sl240\slmult1\qc\cf1\b\fs28 FcmService.js\cf2\fs24\par

\pard\ri-22\sl240\slmult1\b0\par
import messaging from '@react-native-firebase/messaging';\par
import \{Platform\} from 'react-native';\par
\par
class FcmService \{\par
  register = (onRegister, onNotification, onOpenNotification) => \{\par
    this.checkPermission(onRegister);\par
    this.createNotificationListeners(\par
      onRegister,\par
      onNotification,\par
      onOpenNotification,\par
    );\par
  \};\par
\par
  registerAppWithFCM = async () => \{\par
    if (Platform.OS === 'ios') \{\par
      await messaging().registerDeviceForRemoteMessages();\par
      await messaging().setAutoInitEnabled(true);\par
    \}\par
  \};\par
\par
  checkPermission = onRegister => \{\par
    messaging()\par
      .hasPermission()\par
      .then(enabled => \{\par
        if (enabled) \{\par
          // User has permission\par
          this.getToken(onRegister);\par
        \} else \{\par
          // User doesn't have permission\par
          this.requestPermission(onRegister);\par
        \}\par
      \})\par
      .catch(error => \{\par
        console.log('FCM permission rejected', error);\par
      \});\par
  \};\par
  getToken = onRegister => \{\par
    messaging()\par
      .getToken()\par
      .then(fcmToken => \{\par
        if (fcmToken) \{\par
          onRegister(fcmToken);\par
        \} else \{\par
          console.log('User does not have a device token');\par
        \}\par
      \})\par
      .catch(error => \{\par
        console.log('Token Rejected', error);\par
      \});\par
  \};\par
  requestPermission = onRegister => \{\par
    messaging()\par
      .requestPermission()\par
      .then(() => \{\par
        this.getToken(onRegister);\par
      \})\par
      .catch(error => \{\par
        console.log('FCM request permission rejected', error);\par
      \});\par
  \};\par
\par
  deleteToken = () => \{\par
    console.log('FCM service delete token ');\par
    messaging()\par
      .deleteToken()\par
      .catch(error => \{\par
        console.log('FCM delete token error ', error);\par
      \});\par
  \};\par
\par
  createNotificationListeners = (\par
    onRegister,\par
    onNotification,\par
    onOpenNotification,\par
  ) => \{\par
    // when the application is running , but in background\par
    messaging().onNotificationOpenedApp(remoteMessage => \{\par
      console.log('Notification caused to open');\par
      if (remoteMessage) \{\par
        const notification = remoteMessage.notification;\par
        onOpenNotification(notification);\par
      \}\par
    \});\par
    // when the application is opened from a quit state\par
    messaging()\par
      .getInitialNotification()\par
      .then(remoteMessage => \{\par
        console.log('Initial Notification caused to open');\par
        if (remoteMessage) \{\par
          const notification = remoteMessage.notification;\par
          onOpenNotification(notification);\par
        \}\par
      \});\par
\par
    // Foreground state messages\par
    this.messageListener = messaging().onMessage(async remoteMessage => \{\par
      console.log('A FCM new message received', remoteMessage);\par
      if (remoteMessage) \{\par
        let notification = null;\par
        if (Platform.OS === 'ios') \{\par
          notification = remoteMessage.data.notification;\par
        \} else \{\par
          notification = remoteMessage.notification;\par
        \}\par
        onNotification(notification);\par
      \}\par
    \});\par
\par
    // Triggered when have new token\par
    messaging().onTokenRefresh(fcmToken => \{\par
      console.log('New refresh token ', fcmToken);\par
      onRegister(fcmToken);\par
    \});\par
  \};\par
\par
  unRegister = () => \{\par
    this.messageListener();\par
  \};\par
\}\par
\par
export const fcmService = new FcmService();\par
\par

\pard\ri-22\sl240\slmult1\qc\cf1\b\fs28 PushController.js \par
\par

\pard\ri-22\sl240\slmult1\cf2\b0\fs24\par
import PushNotificationIOS from '@react-native-community/push-notification-ios';\par
import PushNotification from 'react-native-push-notification';\par
import \{Platform\} from 'react-native';\par
import \{bool\} from 'prop-types';\par
\par
class LocalNotificationService \{\par
  configure = onOpenNotification => \{\par
    PushNotification.configure(\{\par
      // (optional) Called when Token is generated (iOS and Android)\par
      onRegister: function(token) \{\par
        console.log('TOKEN:', token);\par
      \},\par
      // (required) Called when a remote is received or opened, or local notification is opened\par
      onNotification: function(notification) \{\par
        console.log('NOTIFICATION:', notification);\par
        if (!notification?.data) \{\par
          return;\par
        \}\par
        notification.userInteraction = true;\par
        onOpenNotification(\par
          Platform.OS === 'ios' ? notification.data.item : notification.data,\par
        );\par
\par
        // process the notification\par
\par
        // (required) Called when a remote is received or opened, or local notification is opened\par
        if (Platform.OS === 'ios') \{\par
          notification.finish(PushNotificationIOS.FetchResult.NoData);\par
        \}\par
      \},\par
      // IOS ONLY (optional): default: all - Permissions to register.\par
      permissions: \{\par
        alert: true,\par
        badge: true,\par
        sound: true,\par
      \},\par
\par
      // Should the initial notification be popped automatically\par
      // default: true\par
      popInitialNotification: true,\par
\par
      /**\par
       * (optional) default: true\par
       * - Specified if permissions (ios) and token (android and ios) will requested or not,\par
       * - if not, you must call PushNotificationsHandler.requestPermissions() later\par
       * - if you are not using remote notification or do not have Firebase installed, use this:\par
       *     requestPermissions: Platform.OS === 'ios'\par
       */\par
      requestPermissions: true,\par
    \});\par
  \};\par
\par
  unRegister = () => \{\par
    PushNotification.unregister();\par
  \};\par
\par
  showNotification = (id, title, message, data = \{\}, options = \{\}) => \{\par
    PushNotification.localNotification(\{\par
      /* Android only properties*/\par
      ...this.buildAndroidNotification(id, title, message, data, options),\par
      /* iOS and Android properties */\par
      ...this.buildIOSNotification(id, title, message, data, options),\par
      /* iOS and Android properties*/\par
      title: title || '',\par
      message: message || '',\par
      playSound: options.playSound || false,\par
      soundName: options.soundName || 'default',\par
      userInteraction: false,\par
    \});\par
  \};\par
\par
  buildAndroidNotification = (id, title, message, data = \{\}, options = \{\}) => \{\par
    return \{\par
      id: id,\par
      autoCancel: true,\par
      largeIcon: options.largeIcon || 'ic_launcher',\par
      smallIcon: options.smallIcon || 'ic_notification',\par
      bigText: message || '',\par
      subText: title || '',\par
      vibrate: options.vibrate || true,\par
      vibration: options.vibration || 300,\par
      priority: options.priority || 'high',\par
      importance: options.importance || 'high',\par
      data: data,\par
    \};\par
  \};\par
  buildIOSNotification = (id, title, message, data = \{\}, options = \{\}) => \{\par
    return \{\par
      alertAction: options.alertAction || 'view',\par
      category: options.category || '',\par
      userInfo: \{\par
        id: id,\par
        item: data,\par
      \},\par
    \};\par
  \};\par
\par
  cancelAllLocalNotifications = () => \{\par
    if (Platform.OS === 'ios') \{\par
      PushNotificationIOS.removeAllDeliveredNotifications();\par
    \} else \{\par
      PushNotification.cancelAllLocalNotifications();\par
    \}\par
  \};\par
\par
  removeDeliveredNotificationById = notificationId => \{\par
    console.log('local notification id', notificationId);\par
    PushNotification.cancelLocalNotifications(\{id: `$\{notificationId\}`\});\par
  \};\par
\}\par
\par
export const localNotificationService = new LocalNotificationService();\par
\par
\cf0\fs32 Step 6:\par
\par
\fs24 Add some lines of code in App.js\par
\par
1. Some imports are needed in the top section. Location of this imports as per the relative position of the file.\cf2\par
\par
import firebase from '@react-native-firebase/app';\par
import messaging from '@react-native-firebase/messaging';\par
import \{localNotificationService\} from './App/Common/firebase/PushController';\par
import \{fcmService\} from './App/Common/firebase/FcmService';\par
\par
\cf0 2. Add this line in useEffect section for start calling.\cf2\par
\par
  useEffect(() => \{\par
    ConfigureFirebase()\par
    \});\par
\par
\cf0 3.  Add this function \cf2 ConfigureFirebase() \cf0 after the useEffect section. \cf2 androidCredentials \cf0 and \cf2 iosCredentials \cf0 is require as per the respective projects.\par
\par
\cf2 const ConfigureFirebase = async() =>\{\par
\par
   // console.log(firebase.apps.length, 'firebase')\par
    const androidCredentials = \{\par
      apiKey: "AIzaSyA4y1wuSGNgJF2ODd2N942ZvnXANugtdmY",\par
      authDomain: "yady-4fec5.firebaseapp.com",\par
      projectId: "yady-4fec5",\par
      databaseURL:'',\par
      storageBucket: "yady-4fec5.appspot.com",\par
      messagingSenderId: "112614002267",\par
      appId: "1:112614002267:web:9c21a0b9c933918b07f97e",\par
      measurementId: "G-9RK97J3H4H"\par
    \};\par
    \par
    // Your secondary Firebase project credentials for iOS...\par
    const iosCredentials = \{\par
      clientId: '',\par
      appId: '',\par
      apiKey: '',\par
      databaseURL: '',\par
      storageBucket: '',\par
      messagingSenderId: '',\par
      projectId: '',\par
    \};\par
    \par
    // Select the relevant credentials\par
    const credentials = Platform.select(\{\par
      android: androidCredentials,\par
      ios: iosCredentials,\par
    \});\par
     \par
     if (!firebase.apps.length) \par
     \{\par
    \par
    firebase.initializeApp(credentials);\par
       \par
  \}\par
    \par
  fcmService.registerAppWithFCM();\par
  fcmService.register(onRegister, onNotification, onOpenNotification);\par
  localNotificationService.configure(onOpenNotification);\par
\par
  function onRegister(token) \{\par
    console.log('App onRegister', token);\par
  \}\par
\par
  function onNotification(notify) \{\par
    console.log('App onNotification', notify);\par
    const options = \{\par
      soundName: 'default',\par
      playSound: true,\par
    \};\par
    localNotificationService.showNotification(\par
      0,\par
      notify.title,\par
      notify.body,\par
      notify,\par
      options,\par
    );\par
  \}\par
\par
  function onOpenNotification(notify) \{\par
    console.log('App on open notification', notify);\par
    //alert('Open Notification'+notify.body )\par
  \}\par
\par
   //isReadyRef.current = false;\par
   requestUserPermission()\par
  \}\par
 \par
  const requestUserPermission = async() => \{\par
    //if (Platform.OS === 'ios') \{\par
      const authStatus = await messaging().requestPermission();\par
      const enabled =\par
        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\par
        authStatus === messaging.AuthorizationStatus.PROVISIONAL;\par
\par
      if (enabled) \{\par
        console.log('Authorization status:', authStatus);\par
\par
        messaging()\par
          .getToken()\par
          .then(fcmToken => \{\par
            if (fcmToken) \{\par
              console.warn('have tok=====', fcmToken);\par
            \} else \{\par
              console.warn('have tok=====', 'Not registered');\par
            \}\par
          \})\par
          .catch(error => \{\par
            console.warn('have tok=====', 'Error occured');\par
          \});\par
      \}\par
    //\}\par
  \}\par
\par
\cf0\fs32 Step: 7\par
\par
\fs24 In the push notification some scenario may happend. like...\par
\par
\cf3\fs36 Push notification is not working when app is opened\cf0\par
\par
\cf3\fs24 I have an issue with my app's push notification on ios 7, it works when app in back ground or remove it from dock. But push messages DO NOT work (not appearing) when the app screen comes to foreground. But it was fine with iOS 6. Any change require in coding or storyboard settings?\par
\cf0\par
{{\field{\*\fldinst{HYPERLINK https://stackoverflow.com/questions/22241293/push-notification-is-not-working-when-app-is-opened }}{\fldrslt{https://stackoverflow.com/questions/22241293/push-notification-is-not-working-when-app-is-opened\ul0\cf0}}}}\cf2\f0\fs24\par
\par
\cf0\fs28 Solution: \par
\par
\fs24 Add this line in \cf2 androidmanifest.xml\par
\par
\cf0 +\cf2  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>\par
\par
\cf0 Also create a channel for the notification receive and write a extra code in \cf2 PushController.js\par
\par
  popInitialNotification: true,\par
\par
      /**\par
       * (optional) default: true\par
       * - Specified if permissions (ios) and token (android and ios) will requested or not,\par
       * - if not, you must call PushNotificationsHandler.requestPermissions() later\par
       * - if you are not using remote notification or do not have Firebase installed, use this:\par
       *     requestPermissions: Platform.OS === 'ios'\par
       */\par
      requestPermissions: true,\par
    \});\par
\cf5 //Add this line -------------------------------------\cf3\par
    PushNotification.createChannel(\par
      \{\par
        channelId: 'fcm_fallback_notification_channel', // (required)\par
        channelName: 'Channel', // (required)\par
      \},\par
      (created) => console.log(`createChannel returned '$\{created\}`)\par
    );\par
\par
\cf5 //----------------------------------------------------\cf3\par
\cf2   \};\par
\par
  unRegister = () => \{\par
    PushNotification.unregister();\par
  \};\par
\par
  showNotification = (id, title, message, data = \{\}, options = \{\}) => \{\par
    PushNotification.localNotification(\{ \cf0\par
\fs36\par
}
 